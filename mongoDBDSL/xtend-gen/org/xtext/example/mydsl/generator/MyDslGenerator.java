/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.example.mydsl.myDsl.Collection;
import org.xtext.example.mydsl.myDsl.DBModel;
import org.xtext.example.mydsl.myDsl.DataArray;
import org.xtext.example.mydsl.myDsl.DataPair;
import org.xtext.example.mydsl.myDsl.DataValue;
import org.xtext.example.mydsl.myDsl.Field;
import org.xtext.example.mydsl.myDsl.Index;
import org.xtext.example.mydsl.myDsl.SeedData;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  private final Object indexFields = null;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final DBModel dbModel = Iterators.<DBModel>filter(resource.getAllContents(), DBModel.class).next();
    EList<Collection> _collections = dbModel.getCollections();
    for (final Collection collection : _collections) {
      {
        String _name = collection.getName();
        String _plus = ("mongodb/" + _name);
        final String filePath = (_plus + ".txt");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("// Collection creation code");
        _builder.newLine();
        _builder.append("db.createCollection(\"");
        String _name_1 = collection.getName();
        _builder.append(_name_1);
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("// Field code (if any)");
        _builder.newLine();
        {
          EList<Field> _fields = collection.getFields();
          for(final Field field : _fields) {
            _builder.append("// Field: ");
            String _name_2 = field.getName();
            _builder.append(_name_2);
            _builder.newLineIfNotEmpty();
            _builder.append("db.");
            String _name_3 = collection.getName();
            _builder.append(_name_3);
            _builder.append(".createIndex({");
            String _name_4 = field.getName();
            _builder.append(_name_4);
            _builder.append(": 1})");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("// Index code (if any)");
        _builder.newLine();
        {
          EList<Index> _indexes = collection.getIndexes();
          for(final Index index : _indexes) {
            _builder.append("// Index: ");
            String _name_5 = index.getName();
            _builder.append(_name_5);
            _builder.newLineIfNotEmpty();
            _builder.append("db.");
            String _name_6 = collection.getName();
            _builder.append(_name_6);
            _builder.append(".createIndex({");
            _builder.append(this.indexFields);
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        _builder.append("// Seed data code (if any)");
        _builder.newLine();
        {
          SeedData _seedData = collection.getSeedData();
          boolean _tripleNotEquals = (_seedData != null);
          if (_tripleNotEquals) {
            _builder.append("// Seed data:");
            _builder.newLine();
            {
              EList<DataArray> _dataArrays = collection.getSeedData().getDataArrays();
              for(final DataArray dataArray : _dataArrays) {
                _builder.append("db.");
                String _name_7 = collection.getName();
                _builder.append(_name_7);
                _builder.append(".insert({");
                final Function1<DataPair, String> _function = (DataPair it) -> {
                  String _fieldName = it.getFieldName();
                  String _plus_1 = (_fieldName + ": ");
                  DataValue _value = it.getValue();
                  return (_plus_1 + _value);
                };
                String _join = IterableExtensions.join(ListExtensions.<DataPair, String>map(dataArray.getDataPairs(), _function), ", ");
                _builder.append(_join);
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        fsa.generateFile(filePath, _builder);
      }
    }
  }
}
