/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.DBModel
import org.xtext.example.mydsl.myDsl.Collection

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
 		// Access the root element of the model
    val dbModel = resource.allContents.filter(DBModel).next

    // Generate MongoDB code for each collection
    for (collection : dbModel.collections) {
      // Create a file for the collection
      val filePath = "mongodb/" + collection.name + ".txt"
      fsa.generateFile(filePath, '''
    // Collection creation code
    db.createCollection("«collection.name»")

    // Field code (if any)
    «FOR field : collection.fields»
    // Field: «field.name»
    db.«collection.name».createIndex({«field.name»: 1})
    «ENDFOR»

    // Index code (if any)
    «FOR index : collection.indexes»
    // Index: «index.name»
    db.«collection.name».createIndex({«indexFields»)
    «ENDFOR»

    // Seed data code (if any)
    «IF collection.seedData !== null»
    // Seed data:
    «FOR dataArray : collection.seedData.dataArrays»
    db.«collection.name».insert({«dataArray.dataPairs.map[fieldName + ": " + value].join(", ")»)
    «ENDFOR»
    «ENDIF»
''')      
    }
  }
}